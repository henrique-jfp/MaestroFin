"""
Sistema de Alertas e Notifica√ß√µes - MaestroFin
"""
import logging
from datetime import datetime, time
from telegram import Update
from telegram.ext import ContextTypes
from sqlalchemy.orm import Session
from database.database import get_db
from models import Usuario, Objetivo

logger = logging.getLogger(__name__)

async def schedule_alerts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando para configurar alertas personalizados"""
    await update.message.reply_text(
        "üîî *Sistema de Alertas*\n\n"
        "Em breve voc√™ poder√° configurar:\n"
        "‚Ä¢ Alertas de gastos por categoria\n"
        "‚Ä¢ Lembretes de metas financeiras\n"
        "‚Ä¢ Notifica√ß√µes de vencimentos\n\n"
        "Sistema em desenvolvimento! üöß",
        parse_mode='Markdown'
    )

async def checar_objetivos_semanal(context: ContextTypes.DEFAULT_TYPE):
    """Verifica objetivos semanalmente"""
    try:
        logger.info("üéØ Iniciando verifica√ß√£o semanal de objetivos...")
        
        db: Session = next(get_db())
        
        # Buscar todos os usu√°rios com objetivos ativos
        usuarios_com_objetivos = db.query(Usuario).join(Objetivo).filter(
            Objetivo.ativo == True
        ).distinct().all()
        
        for usuario in usuarios_com_objetivos:
            try:
                # Aqui poderia enviar mensagem sobre progresso dos objetivos
                logger.info(f"üìä Verificando objetivos do usu√°rio {usuario.telegram_id}")
                
                # Por enquanto s√≥ registra no log
                # Futuramente enviar√° mensagens personalizadas
                
            except Exception as e:
                logger.error(f"‚ùå Erro ao verificar objetivos do usu√°rio {usuario.telegram_id}: {e}")
                continue
        
        db.close()
        logger.info("‚úÖ Verifica√ß√£o semanal de objetivos conclu√≠da")
        
    except Exception as e:
        logger.error(f"‚ùå Erro na verifica√ß√£o semanal de objetivos: {e}")

async def agendar_notificacoes_diarias(context: ContextTypes.DEFAULT_TYPE):
    """Agenda notifica√ß√µes di√°rias"""
    try:
        logger.info("üìÖ Executando agendamento di√°rio de notifica√ß√µes...")
        
        # Por enquanto s√≥ registra no log
        # Futuramente enviar√° lembretes personalizados
        
        logger.info("‚úÖ Agendamento di√°rio conclu√≠do")
        
    except Exception as e:
        logger.error(f"‚ùå Erro no agendamento di√°rio: {e}")
