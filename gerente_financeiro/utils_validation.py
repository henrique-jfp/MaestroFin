"""
Fun√ß√µes utilit√°rias para valida√ß√£o e formata√ß√£o reutiliz√°veis
Elimina duplica√ß√µes de c√≥digo entre handlers
"""

import re
from decimal import Decimal, InvalidOperation
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes


def validar_valor_monetario(valor_str: str) -> tuple[bool, float]:
    """
    Valida e converte string de valor monet√°rio para float.
    
    Args:
        valor_str: String com valor (ex: "150", "R$ 150,50", "150.50")
    
    Returns:
        tuple: (is_valid: bool, valor_convertido: float)
    """
    try:
        # Remove espa√ßos, R$, pontos de milhares
        valor_limpo = re.sub(r'[R$\s\.]', '', valor_str.strip())
        
        # Substitui v√≠rgula por ponto
        valor_limpo = valor_limpo.replace(',', '.')
        
        # Converte para Decimal para precis√£o
        valor_decimal = Decimal(valor_limpo)
        
        # Verifica se √© positivo
        if valor_decimal <= 0:
            return False, 0.0
            
        # Verifica se n√£o √© muito grande (> 1 bilh√£o)
        if valor_decimal > 1_000_000_000:
            return False, 0.0
            
        return True, float(valor_decimal)
        
    except (InvalidOperation, ValueError, AttributeError):
        return False, 0.0


def validar_descricao(descricao_str: str) -> tuple[bool, str]:
    """
    Valida e limpa descri√ß√£o de transa√ß√£o.
    
    Args:
        descricao_str: String com descri√ß√£o
    
    Returns:
        tuple: (is_valid: bool, descricao_limpa: str)
    """
    if not descricao_str or not isinstance(descricao_str, str):
        return False, ""
    
    # Remove espa√ßos extras e quebras de linha
    descricao_limpa = re.sub(r'\s+', ' ', descricao_str.strip())
    
    # Verifica tamanho m√≠nimo e m√°ximo
    if len(descricao_limpa) < 2:
        return False, ""
    
    if len(descricao_limpa) > 200:
        return False, ""
    
    # Remove caracteres especiais perigosos (mas mant√©m acentos)
    descricao_limpa = re.sub(r'[<>{}[\]\\"|;]', '', descricao_limpa)
    
    return True, descricao_limpa


def criar_teclado_confirmar(callback_confirmar: str = "confirmar", 
                          callback_cancelar: str = "cancelar",
                          texto_confirmar: str = "‚úÖ Confirmar",
                          texto_cancelar: str = "‚ùå Cancelar") -> InlineKeyboardMarkup:
    """
    Cria teclado padr√£o de confirma√ß√£o reutiliz√°vel.
    
    Args:
        callback_confirmar: Callback data para bot√£o confirmar
        callback_cancelar: Callback data para bot√£o cancelar
        texto_confirmar: Texto do bot√£o confirmar
        texto_cancelar: Texto do bot√£o cancelar
    
    Returns:
        InlineKeyboardMarkup: Teclado com bot√µes
    """
    keyboard = [
        [
            InlineKeyboardButton(texto_confirmar, callback_data=callback_confirmar),
            InlineKeyboardButton(texto_cancelar, callback_data=callback_cancelar)
        ]
    ]
    return InlineKeyboardMarkup(keyboard)


def criar_teclado_colunas_otimizado(botoes: list, colunas: int = 2) -> list:
    """
    Vers√£o otimizada da fun√ß√£o criar_teclado_colunas para eliminar duplica√ß√£o.
    
    Args:
        botoes: Lista de InlineKeyboardButton
        colunas: N√∫mero de colunas por linha
    
    Returns:
        list: Lista de listas (linhas do teclado)
    """
    if not botoes:
        return []
    
    return [botoes[i:i + colunas] for i in range(0, len(botoes), colunas)]


async def ask_valor_generico(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                           estado_proximo: int, contexto_msg: str = None,
                           campo_contexto: str = "valor") -> int:
    """
    Fun√ß√£o gen√©rica para solicitar valor monet√°rio.
    Elimina duplica√ß√£o entre manual_entry_handler e agendamentos_handler.
    
    Args:
        update: Update do Telegram
        context: Context do Telegram
        estado_proximo: Pr√≥ximo estado do ConversationHandler
        contexto_msg: Mensagem personalizada (opcional)
        campo_contexto: Nome do campo no context.user_data
    
    Returns:
        int: Pr√≥ximo estado
    """
    if contexto_msg is None:
        contexto_msg = "üí∞ Digite o valor da transa√ß√£o:"
    
    await update.message.reply_text(
        f"{contexto_msg}\n\n"
        "üìù <i>Exemplos:</i> 150 | R$ 150,50 | 1500.00\n"
        "‚ùå Use /cancelar para interromper",
        parse_mode='HTML'
    )
    
    return estado_proximo


async def ask_descricao_generica(update: Update, context: ContextTypes.DEFAULT_TYPE,
                                estado_proximo: int, contexto_msg: str = None,
                                campo_contexto: str = "descricao") -> int:
    """
    Fun√ß√£o gen√©rica para solicitar descri√ß√£o.
    Elimina duplica√ß√£o entre manual_entry_handler e agendamentos_handler.
    
    Args:
        update: Update do Telegram
        context: Context do Telegram
        estado_proximo: Pr√≥ximo estado do ConversationHandler
        contexto_msg: Mensagem personalizada (opcional)
        campo_contexto: Nome do campo no context.user_data
    
    Returns:
        int: Pr√≥ximo estado
    """
    if contexto_msg is None:
        contexto_msg = "üìù Digite uma descri√ß√£o para a transa√ß√£o:"
    
    await update.message.reply_text(
        f"{contexto_msg}\n\n"
        "üìù <i>Exemplos:</i> Almo√ßo no restaurante | Sal√°rio | Uber para casa\n"
        "‚ùå Use /cancelar para interromper",
        parse_mode='HTML'
    )
    
    return estado_proximo


def formatar_valor_brasileiro(valor: float) -> str:
    """
    Formata valor para padr√£o brasileiro com v√≠rgula.
    
    Args:
        valor: Valor num√©rico
    
    Returns:
        str: Valor formatado (ex: "R$ 1.500,50")
    """
    return f"R$ {valor:,.2f}".replace(',', 'X').replace('.', ',').replace('X', '.')


def extrair_periodo_texto(texto: str) -> tuple[str, str]:
    """
    Extrai indica√ß√µes de per√≠odo de um texto.
    
    Args:
        texto: Texto com poss√≠vel indica√ß√£o de per√≠odo
    
    Returns:
        tuple: (periodo_detectado: str, resto_do_texto: str)
    """
    texto_lower = texto.lower()
    
    periodos = {
        'este m√™s': 'mes_atual',
        'm√™s passado': 'mes_anterior', 
        'esta semana': 'semana_atual',
        'semana passada': 'semana_anterior',
        'hoje': 'hoje',
        'ontem': 'ontem',
        '√∫ltimos 30 dias': 'ultimos_30_dias',
        '√∫ltimos 7 dias': 'ultimos_7_dias'
    }
    
    for periodo_texto, periodo_codigo in periodos.items():
        if periodo_texto in texto_lower:
            resto = texto_lower.replace(periodo_texto, '').strip()
            return periodo_codigo, resto
    
    return '', texto
