"""Camada de mensagens estilizadas (Persona: Alfredo)

Fase 1:
 - Cat√°logo inicial de mensagens centrais (/start, /help e se√ß√µes)
 - Fun√ß√£o render_message com placeholders seguros
 - Feature flag ALFREDO_STYLE (env) para permitir rollback (desliga estilo)
 - Suporte a tipos (success, error, info) para ajustes futuros

Boas pr√°ticas:
 - Nunca concatenar diretamente dados sens√≠veis sem normalizar
 - Placeholders: {name}, {section}, {command}, {value}, etc.
 - Evitar mensagens muito longas em fluxo r√°pido; moderar humor
"""

from __future__ import annotations
import os
from typing import Dict, Any

ALFREDO_STYLE = os.getenv("ALFREDO_STYLE", "on").lower() in {"1", "true", "on", "yes"}

BASE_PREFIX = ""  # Futuro: poderia permitir prefixo global

CATALOG: Dict[str, str] = {
    # --- Core /start ---
    "start_welcome": (
        "Opa, chegue mais, {name}! Eu sou o Alfredo ‚Äì a mesa t√° uma bagun√ßa de papel, "
        "mas aqui no sistema eu deixo tudinho alinhado. Vamos ajeitar sua casa financeira agora.\n\n"
        "S√≥ precisamos configurar umas coisinhas r√°pidas pra eu te ajudar do meu jeito. "
        "Se bater curiosidade sobre tudo que fa√ßo, manda um /help. Arretado demais!"
    ),
    # --- Help main ---
    "help_main_intro": (
        "{name}, sente aqui. Vou te mostrar com calma o que eu sei fazer. Nada de aperreio.\n\n"
        "Eu vigio teus lan√ßamentos, monto relat√≥rios, puxo gr√°ficos, crio metas e at√© converso sobre estrat√©gia. "
        "Escolhe uma dessas √°reas abaixo que eu te oriento, parceiro(a)."
    ),
    # --- Help sections ---
    "help_lancamentos": (
        "üìù <b>Lan√ßamentos</b>\n\n"
        "Registrar bem √© metade do caminho. D√° pra digitar, usar OCR de nota e at√© importar fatura. \n"
        "Se errar, relaxa que a gente edita."
    ),
    "help_analise": (
        "üß† <b>An√°lises Inteligentes</b>\n\n"
        "Me pergunta do jeito que fala com gente: 'Quanto foi iFood esse m√™s?', 'Maior gasto em Lazer', 'Cota√ß√£o do d√≥lar'.\n"
        "Eu respondo sem frescura e ainda aponto tend√™ncia."
    ),
    "help_planejamento": (
        "üéØ <b>Planejamento</b>\n\n"
        "Meta boa √© meta que respira. Cria, acompanha progresso e agenda coisas repetitivas pra n√£o esquecer."
    ),
    "help_config": (
        "‚öôÔ∏è <b>Ferramentas e Ajustes</b>\n\n"
        "Aqui tu molda o bot pro teu jeito: contas, cart√µes, perfil e limites de alerta."
    ),
    "help_gamificacao": (
        "üéÆ <b>Gamifica√ß√£o</b>\n\n"
        "Divertir aprendendo: XP, ranking, conquistas e aquele empurr√£ozinho pra manter consist√™ncia."
    ),
    # --- Fallback / error ---
    "generic_error": (
        "Vixe... me embolei aqui rapidinho. D√° uma repetida pra eu acertar?"
    ),
}


def _plain_fallback(key: str, **context) -> str:
    """Retorna fallback simples sem persona (quando flag desativada)."""
    base = CATALOG.get(key, key)
    try:
        return base.format(**context)
    except Exception:
        return base


def render_message(key: str, *, tone: str = "info", **context: Any) -> str:
    """Renderiza mensagem Alfredo (ou fallback se desligado)."""
    if not ALFREDO_STYLE:
        return _plain_fallback(key, **context)

    template = CATALOG.get(key)
    if not template:
        # fallback persona amig√°vel
        template = CATALOG.get("generic_error", "Algo deu errado.")
    try:
        text = template.format(**context)
    except KeyError:
        # Falta de placeholder n√£o deve quebrar
        text = template

    # Ajustes simples por tom (placeholder para evolu√ß√£o futura)
    if tone == "success":
        # Poder√≠amos adicionar refor√ßo positivo
        pass
    elif tone == "error":
        # Sutil suaviza√ß√£o j√° embutida nas mensagens
        pass
    return BASE_PREFIX + text


def available_keys():  # utilit√°rio para testes / auditoria
    return sorted(CATALOG.keys())
