#!/usr/bin/env python3
"""
Teste para verificar se as corre√ß√µes no salvamento de transa√ß√µes funcionam.
"""

import sys
import os
from datetime import datetime, timezone

# Adiciona o diret√≥rio raiz ao path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from models import Lancamento, Usuario, Conta

def testar_criacao_lancamento():
    """Testa a cria√ß√£o de um objeto Lancamento com os campos corretos."""
    
    print("üß™ Testando cria√ß√£o de lan√ßamento com campos corretos...")
    
    # Simula dados de uma transa√ß√£o extra√≠da
    transacao_teste = {
        'data': '15/04/2025',
        'descricao': 'Transfer√™ncia enviada pelo Pix - Teste',
        'valor': 100.50,
        'tipo_transacao': 'Sa√≠da'
    }
    
    # Simula dados de conta e usu√°rio
    conta_id = 1
    usuario_id = 1
    conta_nome = "Nubank"
    
    try:
        # Mapeia o tipo_transacao para o campo 'tipo' do modelo
        tipo_mapped = transacao_teste.get('tipo_transacao', 'Sa√≠da')
        if tipo_mapped == 'Entrada':
            tipo_db = 'Entrada'
        else:
            tipo_db = 'Sa√≠da'
        
        # Tenta criar o objeto Lancamento
        nova_transacao = Lancamento(
            id_conta=conta_id,
            id_usuario=usuario_id,
            data_transacao=datetime.strptime(transacao_teste['data'], '%d/%m/%Y'),
            descricao=transacao_teste['descricao'],
            valor=float(transacao_teste['valor']),
            tipo=tipo_db,
            forma_pagamento=conta_nome
        )
        
        print("‚úÖ Objeto Lancamento criado com sucesso!")
        print(f"   - Data: {nova_transacao.data_transacao}")
        print(f"   - Descri√ß√£o: {nova_transacao.descricao}")
        print(f"   - Valor: R$ {nova_transacao.valor}")
        print(f"   - Tipo: {nova_transacao.tipo}")
        print(f"   - Conta ID: {nova_transacao.id_conta}")
        print(f"   - Usu√°rio ID: {nova_transacao.id_usuario}")
        print(f"   - Forma pagamento: {nova_transacao.forma_pagamento}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao criar Lancamento: {e}")
        return False

def testar_verificacao_usuario_novo():
    """Testa a verifica√ß√£o se um usu√°rio √© novo."""
    
    print("\nüß™ Testando verifica√ß√£o de usu√°rio novo...")
    
    try:
        # Simula um usu√°rio criado agora
        usuario_novo = Usuario()
        usuario_novo.criado_em = datetime.now(timezone.utc)
        
        # Verifica se √© novo (criado h√° menos de 5 minutos)
        is_new_user = (datetime.now(timezone.utc) - usuario_novo.criado_em).total_seconds() < 300
        
        print(f"‚úÖ Verifica√ß√£o funcionando!")
        print(f"   - Usu√°rio criado em: {usuario_novo.criado_em}")
        print(f"   - √â usu√°rio novo: {is_new_user}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na verifica√ß√£o de usu√°rio novo: {e}")
        return False

def main():
    print("=" * 60)
    print("üîß TESTE DE CORRE√á√ïES NO SALVAMENTO DE TRANSA√á√ïES")
    print("=" * 60)
    
    success_count = 0
    total_tests = 2
    
    # Teste 1: Cria√ß√£o de Lancamento
    if testar_criacao_lancamento():
        success_count += 1
    
    # Teste 2: Verifica√ß√£o de usu√°rio novo
    if testar_verificacao_usuario_novo():
        success_count += 1
    
    print("\n" + "=" * 60)
    print(f"üìä RESULTADO: {success_count}/{total_tests} testes passaram")
    
    if success_count == total_tests:
        print("üéâ Todas as corre√ß√µes est√£o funcionando corretamente!")
        print("üí° O sistema deve conseguir salvar as transa√ß√µes no banco agora.")
    else:
        print("‚ö†Ô∏è  Ainda h√° problemas que precisam ser corrigidos.")
    
    print("=" * 60)

if __name__ == "__main__":
    main()
