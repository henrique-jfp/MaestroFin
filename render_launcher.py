#!/usr/bin/env python3
"""
üîß LAUNCHER ESPECIALIZADO RENDER - Solu√ß√£o definitiva para webhook
Implementa√ß√£o espec√≠fica para ambiente Render com threading otimizado
"""

import os
import logging
import sys
import asyncio
import threading
from flask import request, Flask
from telegram import Update
from telegram.ext import Application

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# ‚úÖ SOLU√á√ÉO RENDER: Pool de threads dedicado
from concurrent.futures import ThreadPoolExecutor
import queue

# Vari√°veis globais
bot_application = None
TELEGRAM_TOKEN = os.environ.get('TELEGRAM_TOKEN')
update_queue = queue.Queue()
executor = ThreadPoolExecutor(max_workers=4, thread_name_prefix="webhook-")

def process_updates_worker():
    """Worker dedicado para processar updates - roda em background"""
    logger.info("üîÑ Worker de updates iniciado")
    
    while True:
        try:
            # Pegar update da queue (bloqueia at√© ter um)
            update = update_queue.get(timeout=60)  # Timeout de 60s
            
            if update is None:  # Sinal para parar
                logger.info("üõë Worker de updates parando")
                break
                
            logger.info("‚ö° Processando update em worker dedicado")
            
            # Criar loop isolado para este update
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            
            try:
                # Processar update
                loop.run_until_complete(bot_application.process_update(update))
                logger.info("‚úÖ Update processado com sucesso pelo worker")
                
            except Exception as e:
                logger.error(f"‚ùå Erro no worker: {e}")
                # Log do erro mas continua processando outros updates
                
            finally:
                loop.close()
                update_queue.task_done()
                
        except queue.Empty:
            # Timeout normal - continua executando
            continue
        except Exception as e:
            logger.error(f"‚ùå Erro cr√≠tico no worker: {e}")
            # Continua executando mesmo com erro

def setup_bot_webhook_render(flask_app):
    """Configura√ß√£o de webhook otimizada para Render"""
    global bot_application
    
    if not TELEGRAM_TOKEN:
        logger.error("‚ùå TELEGRAM_TOKEN n√£o configurado")
        return flask_app
    
    try:
        logger.info("üöÄ Configurando bot webhook RENDER-OPTIMIZED...")
        
        # Importar e criar aplica√ß√£o do bot
        from bot import create_application
        bot_application = create_application()
        
        # Inicializar bot de forma s√≠ncrona (mais est√°vel no Render)
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        try:
            loop.run_until_complete(bot_application.initialize())
            logger.info("‚úÖ Bot inicializado (Render Mode)")
        finally:
            loop.close()
        
        # ‚úÖ INICIAR WORKER EM BACKGROUND
        worker_thread = threading.Thread(target=process_updates_worker, daemon=True)
        worker_thread.start()
        logger.info("üîÑ Worker de updates ativo")
        
        # Rota webhook OTIMIZADA
        @flask_app.route(f'/webhook/{TELEGRAM_TOKEN}', methods=['POST'])
        def webhook():
            """Webhook otimizado para Render - apenas adiciona √† queue"""
            try:
                update_data = request.get_json()
                
                if update_data:
                    logger.info("üì® Update recebido via webhook")
                    
                    # Converter para objeto Update
                    update = Update.de_json(update_data, bot_application.bot)
                    
                    # ‚úÖ SOLU√á√ÉO RENDER: Apenas adicionar √† queue (super r√°pido)
                    try:
                        update_queue.put_nowait(update)
                        logger.info("‚ö° Update adicionado √† queue (processamento em background)")
                        
                    except queue.Full:
                        logger.warning("‚ö†Ô∏è Queue cheia, descartando update")
                    
                return "OK", 200
                
            except Exception as e:
                logger.error(f"‚ùå Erro no webhook: {e}")
                return "ERROR", 500
        
        # Rota para configurar webhook
        @flask_app.route('/set_webhook', methods=['GET', 'POST'])
        def set_webhook():
            """Configura webhook do Telegram"""
            try:
                base_url = os.environ.get('RENDER_EXTERNAL_URL', 'https://maestrofin-unified.onrender.com')
                webhook_url = f"{base_url}/webhook/{TELEGRAM_TOKEN}"
                
                logger.info(f"üîß Configurando webhook: {webhook_url}")
                
                import requests
                response = requests.post(
                    f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/setWebhook",
                    data={'url': webhook_url},
                    timeout=10
                )
                result = response.json()
                
                if result.get('ok'):
                    return f"""
                    <!DOCTYPE html>
                    <html>
                    <head><title>‚úÖ Webhook Render Mode</title></head>
                    <body style="font-family: Arial, sans-serif; max-width: 800px; margin: 50px auto; padding: 20px;">
                        <h2 style="color: green;">‚úÖ Webhook Configurado (Render Mode)!</h2>
                        <p><strong>URL:</strong> <code>{webhook_url}</code></p>
                        <p><strong>Status:</strong> ‚úÖ Ativo com worker dedicado</p>
                        <p><strong>Modo:</strong> üîÑ Queue-based processing</p>
                        <hr>
                        <h3>üß™ Teste Agora:</h3>
                        <ol>
                            <li>Digite <code>/help</code> no bot</li>
                            <li>Aguarde 2-3 segundos</li>
                            <li>Deve funcionar perfeitamente!</li>
                        </ol>
                        <p><a href="/bot_status" style="color: blue;">üìä Status do Bot</a></p>
                        <p><a href="/" style="color: blue;">üè† Dashboard</a></p>
                    </body>
                    </html>
                    """, 200
                else:
                    return f"‚ùå Erro: {result.get('description', 'Desconhecido')}", 500
                    
            except Exception as e:
                logger.error(f"‚ùå Erro ao configurar webhook: {e}")
                return f"‚ùå Erro: {e}", 500
        
        # Status do bot
        @flask_app.route('/bot_status', methods=['GET'])
        def bot_status():
            """Status otimizado"""
            queue_size = update_queue.qsize()
            return f"""
            <!DOCTYPE html>
            <html>
            <head><title>ü§ñ Bot Status (Render Mode)</title></head>
            <body style="font-family: Arial, sans-serif; max-width: 800px; margin: 50px auto; padding: 20px;">
                <h2 style="color: green;">ü§ñ Bot Status - Render Mode</h2>
                <p>‚úÖ Bot configurado: <strong>Sim</strong></p>
                <p>üîÑ Worker ativo: <strong>Sim</strong></p>
                <p>üì¨ Updates na queue: <strong>{queue_size}</strong></p>
                <p>‚ö° Modo: <strong>Background Processing</strong></p>
                
                <h3>üß™ Teste R√°pido</h3>
                <p>Digite <code>/help</code> no bot - deve funcionar!</p>
                
                <p><a href="/set_webhook" style="color: blue;">üîß Reconfigurar Webhook</a></p>
                <p><a href="/" style="color: blue;">üè† Dashboard</a></p>
            </body>
            </html>
            """, 200
        
        logger.info("‚úÖ Webhook Render configurado com sucesso")
        return flask_app
        
    except Exception as e:
        logger.error(f"‚ùå Erro na configura√ß√£o: {e}")
        return flask_app

def create_render_app():
    """Cria aplica√ß√£o otimizada para Render"""
    try:
        logger.info("üè≠ Criando aplica√ß√£o RENDER-OPTIMIZED...")
        
        # Dashboard
        from analytics.dashboard_app import app
        
        # Integrar webhook otimizado
        app = setup_bot_webhook_render(app)
        
        logger.info("‚úÖ Aplica√ß√£o Render criada")
        return app
        
    except Exception as e:
        logger.error(f"‚ùå Erro: {e}")
        from analytics.dashboard_app import app
        return app

def main():
    """Launcher principal otimizado para Render"""
    logger.info("üöÄ RENDER LAUNCHER - Webhook Otimizado Iniciando...")
    
    try:
        # Criar app otimizada
        app = create_render_app()
        
        # Configurar porta
        port = int(os.environ.get('PORT', 5000))
        
        logger.info("üéØ Servidor Render iniciando...")
        logger.info("üì° Dashboard: /")
        logger.info("ü§ñ Status: /bot_status")
        logger.info("üîß Webhook: /set_webhook")
        logger.info("‚ö° Modo: Background Queue Processing")
        
        # Executar com configura√ß√µes otimizadas para Render
        app.run(
            host='0.0.0.0',
            port=port,
            debug=False,
            use_reloader=False,
            threaded=True
        )
        
    except Exception as e:
        logger.error(f"‚ùå Erro cr√≠tico: {e}", exc_info=True)
        sys.exit(1)

if __name__ == '__main__':
    main()
