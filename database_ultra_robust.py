#!/usr/bin/env python3
"""
üîß DATABASE ULTRA-ROBUSTA - Com Timeout e Skip Autom√°tico
"""

import logging
import signal
import os
from contextlib import contextmanager

logger = logging.getLogger(__name__)

@contextmanager
def timeout_context(seconds):
    """Context manager para timeout em opera√ß√µes de banco"""
    def timeout_handler(signum, frame):
        raise TimeoutError(f"Opera√ß√£o expirou ap√≥s {seconds} segundos")
    
    # Configurar handler de timeout
    old_handler = signal.signal(signal.SIGALRM, timeout_handler)
    signal.alarm(seconds)
    
    try:
        yield
    finally:
        signal.alarm(0)
        signal.signal(signal.SIGALRM, old_handler)

def popular_dados_iniciais_ultra_robusta(db_session):
    """
    üî• VERS√ÉO ULTRA-ROBUSTA - Popula√ß√£o de dados com timeout
    """
    try:
        logger.info("üîß [ULTRA-ROBUST] Iniciando popula√ß√£o de dados com timeout...")
        
        # ‚è∞ TIMEOUT DE 30 SEGUNDOS - SKIP SE TRAVAR
        with timeout_context(30):
            from sqlalchemy import func, and_
            from models import Categoria, Subcategoria
            
            logger.info("üì¶ Verificando categorias existentes...")
            
            # üî• VERIFICA√á√ÉO R√ÅPIDA - SE J√Å EXISTEM, SKIP
            count_categorias = db_session.query(Categoria).count()
            if count_categorias >= 10:  # Threshold m√≠nimo
                logger.info(f"‚úÖ [SKIP] {count_categorias} categorias j√° existem - pulando popula√ß√£o")
                return True
            
            # üè≠ POPULA√á√ÉO M√çNIMA E R√ÅPIDA
            categorias_essenciais = {
                "Alimenta√ß√£o": ["Supermercado", "Restaurante"],
                "Transporte": ["Combust√≠vel", "App Transporte"],
                "Sa√∫de": ["Farm√°cia", "Consulta"],
                "Receitas": ["Sal√°rio", "Freelance"],
                "Outros": ["Diversos"]
            }
            
            logger.info("üè≠ Populando categorias essenciais...")
            
            for nome_cat, subs in categorias_essenciais.items():
                try:
                    # Categoria
                    categoria_obj = db_session.query(Categoria).filter(
                        func.lower(Categoria.nome) == func.lower(nome_cat)
                    ).first()
                    
                    if not categoria_obj:
                        categoria_obj = Categoria(nome=nome_cat)
                        db_session.add(categoria_obj)
                        db_session.flush()  # Flush sem commit
                        logger.info(f"üìÇ Categoria '{nome_cat}' criada")
                    
                    # Subcategorias
                    for nome_sub in subs:
                        subcategoria_obj = db_session.query(Subcategoria).filter(
                            and_(
                                Subcategoria.id_categoria == categoria_obj.id,
                                func.lower(Subcategoria.nome) == func.lower(nome_sub)
                            )
                        ).first()
                        
                        if not subcategoria_obj:
                            nova_sub = Subcategoria(nome=nome_sub, id_categoria=categoria_obj.id)
                            db_session.add(nova_sub)
                            logger.info(f"üìã Subcategoria '{nome_sub}' criada")
                
                except Exception as cat_error:
                    logger.warning(f"‚ö†Ô∏è Erro ao criar categoria '{nome_cat}': {cat_error}")
                    continue
            
            # üî• COMMIT √öNICO E R√ÅPIDO
            db_session.commit()
            logger.info("‚úÖ [ULTRA-ROBUST] Popula√ß√£o conclu√≠da com sucesso!")
            return True
            
    except TimeoutError:
        logger.warning("‚è∞ [TIMEOUT] Popula√ß√£o de dados expirou - continuando sem dados iniciais")
        try:
            db_session.rollback()
        except:
            pass
        return False
        
    except Exception as e:
        logger.error(f"‚ùå [ULTRA-ROBUST] Erro na popula√ß√£o: {e}")
        try:
            db_session.rollback()
        except:
            pass
        return False

def verificar_e_popular_se_necessario(db_session):
    """
    üéØ FUN√á√ÉO WRAPPER - S√≥ popula se realmente necess√°rio
    """
    try:
        # üîç VERIFICA√á√ÉO ULTRA-R√ÅPIDA
        from models import Categoria
        total_cats = db_session.query(Categoria).count()
        
        if total_cats == 0:
            logger.info("üîß Banco vazio - populando dados essenciais...")
            return popular_dados_iniciais_ultra_robusta(db_session)
        else:
            logger.info(f"‚úÖ Banco j√° populado ({total_cats} categorias) - skip")
            return True
            
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Erro na verifica√ß√£o: {e} - continuando sem popula√ß√£o")
        return False
