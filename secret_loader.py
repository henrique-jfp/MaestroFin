#!/usr/bin/env python3
"""
üîê SECRET FILES LOADER - Carregar vari√°veis de ambiente de arquivos secretos
Prioridade: Secret Files > Environment Variables > .env local
"""

import os
import logging
from pathlib import Path

logger = logging.getLogger(__name__)

def load_secret_env_file():
    """
    üéØ RENDER SECRET FILES: Carregar .env do secret file
    Arquivo: /etc/secrets/environment_variables
    """
    secret_env_path = '/etc/secrets/environment_variables'
    
    if not os.path.exists(secret_env_path):
        logger.info("‚ö†Ô∏è Secret environment file n√£o encontrado - usando env vars normais")
        return False
    
    try:
        logger.info("üîê Carregando vari√°veis de ambiente do Secret File...")
        
        with open(secret_env_path, 'r') as f:
            lines = f.readlines()
        
        loaded_vars = 0
        for line in lines:
            line = line.strip()
            
            # Ignorar coment√°rios e linhas vazias
            if not line or line.startswith('#'):
                continue
            
            # Parse KEY=VALUE
            if '=' in line:
                key, value = line.split('=', 1)
                key = key.strip()
                value = value.strip().strip('"').strip("'")
                
                # S√≥ sobrescrever se n√£o existir nas env vars
                if key not in os.environ:
                    os.environ[key] = value
                    loaded_vars += 1
                    logger.debug(f"‚úÖ Carregado: {key}")
        
        logger.info(f"üéâ {loaded_vars} vari√°veis carregadas do Secret File!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao carregar Secret File: {e}")
        return False

def setup_environment():
    """
    üöÄ Setup completo do ambiente
    1. Secret Files (.env)
    2. Environment Variables (Render)
    3. Local .env (desenvolvimento)
    """
    
    # 1. Tentar carregar do Secret File primeiro
    if load_secret_env_file():
        logger.info("‚úÖ Usando configura√ß√£o do Secret File")
        return
    
    # 2. Se n√£o tiver Secret File, usar env vars normais
    if os.getenv('RENDER_SERVICE_NAME'):
        logger.info("‚úÖ Usando Environment Variables do Render")
        return
    
    # 3. Ambiente local - tentar .env
    try:
        from dotenv import load_dotenv
        env_path = Path(__file__).parent.parent / '.env'
        if env_path.exists():
            load_dotenv(env_path)
            logger.info("‚úÖ Arquivo .env local carregado")
        else:
            logger.warning("‚ö†Ô∏è Nenhum arquivo .env encontrado localmente")
    except ImportError:
        logger.warning("‚ö†Ô∏è python-dotenv n√£o instalado - pulando .env local")

def validate_required_vars():
    """Validar se as vari√°veis cr√≠ticas est√£o presentes"""
    required_vars = [
        'TELEGRAM_TOKEN',
        'DATABASE_URL',
        'GEMINI_API_KEY'
    ]
    
    missing_vars = []
    for var in required_vars:
        if not os.getenv(var):
            missing_vars.append(var)
    
    if missing_vars:
        logger.error(f"‚ùå Vari√°veis obrigat√≥rias ausentes: {missing_vars}")
        return False
    
    logger.info("‚úÖ Todas as vari√°veis obrigat√≥rias est√£o presentes")
    return True

# Auto-executar na importa√ß√£o
if __name__ == "__main__":
    setup_environment()
    validate_required_vars()
else:
    # Executar automaticamente quando importado
    setup_environment()
