#!/usr/bin/env python3
"""
üîß UNIFIED LAUNCHER - Roda bot + dashboard no mesmo processo (Render Free)
Solu√ß√£o para plano gratuito do Render que n√£o permite Background Workers
"""

import asyncio
import os
import logging
import threading
import time
from multiprocessing import Process

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def run_bot_thread_safe():
    """
    Executa o bot do Telegram em uma thread, aplicando um patch para
    desabilitar os signal handlers que causam erro fora da thread principal.
    Esta √© a abordagem correta para rodar em produ√ß√£o no Render Free Tier.
    """
    logger.info("ü§ñ Iniciando bot do Telegram em thread (modo de produ√ß√£o)...")
    try:
        # Monkey-patch para desabilitar os signal handlers no run_polling.
        # Isso √© necess√°rio para rodar em uma thread que n√£o √© a principal,
        # evitando o erro "ValueError: set_wakeup_fd only works in main thread".
        from telegram.ext import Application
        
        original_run_polling = Application.run_polling
        
        def thread_safe_run_polling(self, *args, **kwargs):
            logger.info("üîß Aplicando patch para `run_polling` em thread.")
            # For√ßa a desativa√ß√£o dos signal handlers, que s√≥ funcionam na thread principal.
            kwargs['stop_signals'] = []
            return original_run_polling(self, *args, **kwargs)

        Application.run_polling = thread_safe_run_polling
        logger.info("‚úÖ Patch de `run_polling` aplicado com sucesso.")

        # Agora podemos chamar bot.main() com seguran√ßa, pois ele usar√° nossa vers√£o corrigida.
        import bot
        bot.main()

    except Exception as e:
        logger.error(f"‚ùå Erro cr√≠tico ao iniciar o bot na thread: {e}", exc_info=True)

def run_bot_process():
    """Executa o bot do Telegram em um processo separado (para dev local)."""
    logger.info("ü§ñ Iniciando bot do Telegram em processo separado...")
    import bot
    bot.main()

def run_dashboard():
    """Executa o dashboard Flask"""
    try:
        logger.info("üåê Iniciando dashboard...")
        from analytics.dashboard_app import app
        
        # Usar porta do Render ou 5000 como fallback
        port = int(os.environ.get('PORT', 5000))
        
        app.run(
            host='0.0.0.0',
            port=port,
            debug=False,  # Desabilitar debug em produ√ß√£o
            use_reloader=False  # Evitar conflitos com threading
        )
    except Exception as e:
        logger.error(f"‚ùå Erro no dashboard: {e}", exc_info=True)

def main():
    """Fun√ß√£o principal que inicia bot e dashboard simultaneamente"""
    logger.info("üöÄ UNIFIED LAUNCHER - Iniciando sistema completo...")
    
    # Verificar se √© ambiente de produ√ß√£o
    is_production = os.environ.get('RENDER_SERVICE_NAME') is not None
    
    if is_production:
        logger.info("üè≠ Ambiente de produ√ß√£o detectado (Render)")
        
        # Em produ√ß√£o, usar threading para rodar ambos
        bot_thread = threading.Thread(target=run_bot_thread_safe, daemon=True)
        bot_thread.start()
        logger.info("‚úÖ Bot iniciado em thread separada")
        
        # O dashboard agora roda diretamente na thread principal.
        # Como app.run() √© bloqueante, ele manter√° o processo vivo
        # enquanto o bot roda na thread em segundo plano.
        run_dashboard()
        
    else:
        logger.info("üè† Ambiente local detectado")
        
        # Localmente, usar processos separados para melhor isolamento
        bot_process = Process(target=run_bot_process)
        dashboard_process = Process(target=run_dashboard)
        
        try:
            bot_process.start()
            dashboard_process.start()
            
            logger.info("‚úÖ Bot e Dashboard iniciados")
            
            # Aguardar ambos os processos
            bot_process.join()
            dashboard_process.join()
            
        except KeyboardInterrupt:
            logger.info("üõë Parando servi√ßos...")
            bot_process.terminate()
            dashboard_process.terminate()

if __name__ == '__main__':
    main()
